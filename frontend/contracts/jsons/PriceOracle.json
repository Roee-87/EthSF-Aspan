{
  "address": "0x9c63D17213A5D6FCf1c7750Fa4F2567Ea088257C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "usdcAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "usdcAggregatorAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "name": "getPriceFromAggregator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vaultAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "aTokenAddresses",
          "type": "address[]"
        }
      ],
      "name": "getUSDCPriceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vaultAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "aTokenAddresses",
          "type": "address[]"
        }
      ],
      "name": "getUSDPriceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "valueHolder",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "aTokenAddresses",
          "type": "address[]"
        }
      ],
      "name": "getUSDValueOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "usdValue",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "erc20Address",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "aggregatorAddress",
          "type": "address"
        }
      ],
      "name": "setAggregatorAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "usdcAddress",
          "type": "address"
        }
      ],
      "name": "setUSDCaddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x216538d7f7941be42874b49cae7e3afa4afa421da670fb9a33fc4a231cd8f57c",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x9c63D17213A5D6FCf1c7750Fa4F2567Ea088257C",
    "transactionIndex": 0,
    "gasUsed": "759909",
    "logsBloom": "0x
    "blockHash": "0xa18d5def550b90311217f7c30b3a56b163f0fe6a96e4e2143d831278f3f449ee",
    "transactionHash": "0x216538d7f7941be42874b49cae7e3afa4afa421da670fb9a33fc4a231cd8f57c",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 35247024,
        "transactionHash": "0x216538d7f7941be42874b49cae7e3afa4afa421da670fb9a33fc4a231cd8f57c",
        "address": "0x9c63D17213A5D6FCf1c7750Fa4F2567Ea088257C",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xa18d5def550b90311217f7c30b3a56b163f0fe6a96e4e2143d831278f3f449ee"
      }
    ],
    "blockNumber": 35247024,
    "cumulativeGasUsed": "759909",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2791bca1f2de4661ed88a30c99a7a9449aa84174",
    "0xfE4A8cc5b5B2366C1B58Bea3858e81843581b2F7"
  ],
  "numDeployments": 1,
  "solcInputHash": "ff1b4d46e8340c3fd0975d44bf37d189",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usdcAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdcAggregatorAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"name\":\"getPriceFromAggregator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vaultAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"aTokenAddresses\",\"type\":\"address[]\"}],\"name\":\"getUSDCPriceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vaultAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"aTokenAddresses\",\"type\":\"address[]\"}],\"name\":\"getUSDPriceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"valueHolder\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"aTokenAddresses\",\"type\":\"address[]\"}],\"name\":\"getUSDValueOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"usdValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"aggregatorAddress\",\"type\":\"address\"}],\"name\":\"setAggregatorAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usdcAddress\",\"type\":\"address\"}],\"name\":\"setUSDCaddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PriceOracle.sol\":\"PriceOracle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/PriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./interfaces/IAToken.sol\\\";\\nimport \\\"./interfaces/IdERC20.sol\\\";\\nimport \\\"./interfaces/IPriceOracle.sol\\\";\\n\\ncontract PriceOracle is IPriceOracle, Ownable {\\n    mapping(address => address) private s_USDAggregatorAddresses;\\n    address private s_USDCaddress;\\n    uint256 private constant DIVISION_GUARD = 1e18;\\n\\n    constructor(address usdcAddress, address usdcAggregatorAddress) {\\n        setUSDCaddress(usdcAddress);\\n        setAggregatorAddress(usdcAddress, usdcAggregatorAddress);\\n    }\\n\\n    function _toWei(uint256 number, uint256 decimals) internal pure returns (uint256) {\\n        uint256 power = 18 - decimals;\\n        return number * (10**power);\\n    }\\n\\n    function _getUnderlyingBalanceOf(address owner, address aTokenAddress)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        IERC20 underlyingToken = IERC20(_getUnderlyingAddressOf(aTokenAddress));\\n        return underlyingToken.balanceOf(owner);\\n    }\\n\\n    function _getUnderlyingAddressOf(address aTokenAddress) internal view returns (address) {\\n        IAToken aToken = IAToken(aTokenAddress);\\n        address underlyingAddress = aToken.UNDERLYING_ASSET_ADDRESS();\\n\\n        return underlyingAddress;\\n    }\\n\\n    function getPriceFromAggregator(address priceFeedAddress) public view returns (uint256) {\\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(priceFeedAddress);\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n\\n        return _toWei(uint256(price), priceFeed.decimals());\\n    }\\n\\n    function setUSDCaddress(address usdcAddress) public onlyOwner {\\n        s_USDCaddress = usdcAddress;\\n    }\\n\\n    function setAggregatorAddress(address erc20Address, address aggregatorAddress)\\n        public\\n        onlyOwner\\n    {\\n        s_USDAggregatorAddresses[erc20Address] = aggregatorAddress;\\n    }\\n\\n    function getUSDValueOf(address valueHolder, address[] calldata aTokenAddresses)\\n        public\\n        view\\n        returns (uint256 usdValue)\\n    {\\n        for (uint256 i = 0; i < aTokenAddresses.length; i++) {\\n            address aTokenAddress = aTokenAddresses[i];\\n            IdERC20 aToken = IdERC20(aTokenAddress);\\n\\n            uint256 aBalanceOfVault = aToken.balanceOf(valueHolder);\\n            uint256 pricePerToken = getPriceFromAggregator(\\n                s_USDAggregatorAddresses[_getUnderlyingAddressOf(aTokenAddress)]\\n            );\\n\\n            usdValue += (_toWei(aBalanceOfVault, aToken.decimals()) * pricePerToken) / 1e18;\\n        }\\n    }\\n\\n    function _usdToUSDC(uint256 value) internal view returns (uint256) {\\n        // converting total usd value to usdc value\\n        // (bc we are returning usdc to the user => price has to be in usdc)\\n        return\\n            (value *\\n                ((1e18 * DIVISION_GUARD) /\\n                    getPriceFromAggregator(s_USDAggregatorAddresses[s_USDCaddress]))) /\\n            DIVISION_GUARD;\\n    }\\n\\n    function getUSDPriceOf(\\n        address vaultAddress,\\n        address tokenAddress,\\n        address[] calldata aTokenAddresses\\n    ) external view override returns (uint256) {\\n        return\\n            (getUSDValueOf(vaultAddress, aTokenAddresses) * DIVISION_GUARD) /\\n            IERC20(tokenAddress).totalSupply();\\n    }\\n\\n    function getUSDCPriceOf(\\n        address vaultAddress,\\n        address tokenAddress,\\n        address[] calldata aTokenAddresses\\n    ) external view override returns (uint256) {\\n        return\\n            ((_usdToUSDC(getUSDValueOf(vaultAddress, aTokenAddresses))) * DIVISION_GUARD) /\\n            IERC20(tokenAddress).totalSupply();\\n    }\\n}\\n\",\"keccak256\":\"0xb2b9f92f14fcccaff523917bf4142f2a6df70df66eab3cdd891742937a10e812\",\"license\":\"MIT\"},\"contracts/interfaces/IAToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\ninterface IAToken {\\n    function UNDERLYING_ASSET_ADDRESS() external view returns (address);\\n}\\n\",\"keccak256\":\"0x1578cbedfdfdaef73d17db3216c590fee21129e555f69e10c8053fa18934be05\",\"license\":\"MIT\"},\"contracts/interfaces/IPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\ninterface IPriceOracle {\\n    function getUSDPriceOf(\\n        address vaultAddress,\\n        address tokenAddress,\\n        address[] calldata aTokenAddresses\\n    ) external view returns (uint256);\\n\\n    function getUSDCPriceOf(\\n        address vaultAddress,\\n        address tokenAddress,\\n        address[] calldata aTokenAddresses\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x90cbc56fa7e3d9a87d209810b1eeed3209872f2903af62912e9e1a4fa3f7ebc4\",\"license\":\"MIT\"},\"contracts/interfaces/IdERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n// interface for erc20 that also implements decimals getter\\ninterface IdERC20 is IERC20 {\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x828d02c69611c76dc5cb375da70de9a16b071e61a33e26859998cf0f78fa2293\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405162000d2d38038062000d2d83398101604081905261003191610180565b61003a33610054565b610043826100a4565b61004d82826100ce565b50506101b3565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6100ac610104565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6100d6610104565b6001600160a01b03918216600090815260016020526040902080546001600160a01b03191691909216179055565b6000546001600160a01b031633146101625760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640160405180910390fd5b565b80516001600160a01b038116811461017b57600080fd5b919050565b6000806040838503121561019357600080fd5b61019c83610164565b91506101aa60208401610164565b90509250929050565b610b6a80620001c36000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80638da5cb5b116100665780638da5cb5b146100ee57806393b0f4161461010957806396a9eecd1461011c578063ba274d181461012f578063f2fde38b1461014257600080fd5b80632246b5c814610098578063501b7554146100be578063565693ef146100d1578063715018a6146100e4575b600080fd5b6100ab6100a63660046107b0565b610155565b6040519081526020015b60405180910390f35b6100ab6100cc366004610815565b6101f2565b6100ab6100df36600461086a565b610389565b6100ec610443565b005b6000546040516001600160a01b0390911681526020016100b5565b6100ec61011736600461088e565b610457565b6100ec61012a36600461086a565b61048d565b6100ab61013d3660046107b0565b6104b7565b6100ec61015036600461086a565b61052f565b6000836001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610195573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101b991906108c7565b670de0b6b3a76400006101d56101d08887876101f2565b6105ad565b6101df91906108f6565b6101e99190610915565b95945050505050565b6000805b8281101561038157600084848381811061021257610212610937565b9050602002016020810190610227919061086a565b6040516370a0823160e01b81526001600160a01b0388811660048301529192508291600091908316906370a0823190602401602060405180830381865afa158015610276573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029a91906108c7565b905060006102d0600160006102ae87610616565b6001600160a01b03908116825260208201929092526040016000205416610389565b9050670de0b6b3a76400008161034a84866001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561031e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610342919061094d565b60ff16610680565b61035491906108f6565b61035e9190610915565b6103689087610970565b955050505050808061037990610988565b9150506101f6565b509392505050565b6000808290506000816001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156103cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f391906109c0565b50505091505061043b81836001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561031e573d6000803e3d6000fd5b949350505050565b61044b6106a5565b61045560006106ff565b565b61045f6106a5565b6001600160a01b03918216600090815260016020526040902080546001600160a01b03191691909216179055565b6104956106a5565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6000836001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051b91906108c7565b670de0b6b3a76400006101d58786866101f2565b6105376106a5565b6001600160a01b0381166105a15760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b6105aa816106ff565b50565b6002546001600160a01b039081166000908152600160205260408120549091670de0b6b3a7640000916105e09116610389565b6105f2670de0b6b3a7640000806108f6565b6105fc9190610915565b61060690846108f6565b6106109190610915565b92915050565b6000808290506000816001600160a01b031663b16a19de6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561065c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043b9190610a10565b60008061068e836012610a2d565b905061069b81600a610b28565b61043b90856108f6565b6000546001600160a01b031633146104555760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610598565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811681146105aa57600080fd5b60008083601f84011261077657600080fd5b50813567ffffffffffffffff81111561078e57600080fd5b6020830191508360208260051b85010111156107a957600080fd5b9250929050565b600080600080606085870312156107c657600080fd5b84356107d18161074f565b935060208501356107e18161074f565b9250604085013567ffffffffffffffff8111156107fd57600080fd5b61080987828801610764565b95989497509550505050565b60008060006040848603121561082a57600080fd5b83356108358161074f565b9250602084013567ffffffffffffffff81111561085157600080fd5b61085d86828701610764565b9497909650939450505050565b60006020828403121561087c57600080fd5b81356108878161074f565b9392505050565b600080604083850312156108a157600080fd5b82356108ac8161074f565b915060208301356108bc8161074f565b809150509250929050565b6000602082840312156108d957600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615610910576109106108e0565b500290565b60008261093257634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561095f57600080fd5b815160ff8116811461088757600080fd5b60008219821115610983576109836108e0565b500190565b60006001820161099a5761099a6108e0565b5060010190565b805169ffffffffffffffffffff811681146109bb57600080fd5b919050565b600080600080600060a086880312156109d857600080fd5b6109e1866109a1565b9450602086015193506040860151925060608601519150610a04608087016109a1565b90509295509295909350565b600060208284031215610a2257600080fd5b81516108878161074f565b600082821015610a3f57610a3f6108e0565b500390565b600181815b80851115610a7f578160001904821115610a6557610a656108e0565b80851615610a7257918102915b93841c9390800290610a49565b509250929050565b600082610a9657506001610610565b81610aa357506000610610565b8160018114610ab95760028114610ac357610adf565b6001915050610610565b60ff841115610ad457610ad46108e0565b50506001821b610610565b5060208310610133831016604e8410600b8410161715610b02575081810a610610565b610b0c8383610a44565b8060001904821115610b2057610b206108e0565b029392505050565b60006108878383610a8756fea2646970667358221220165cf0a14549064c4f5fad483d60b36ff092b703d11065c90a73014863cd820c64736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c80638da5cb5b116100665780638da5cb5b146100ee57806393b0f4161461010957806396a9eecd1461011c578063ba274d181461012f578063f2fde38b1461014257600080fd5b80632246b5c814610098578063501b7554146100be578063565693ef146100d1578063715018a6146100e4575b600080fd5b6100ab6100a63660046107b0565b610155565b6040519081526020015b60405180910390f35b6100ab6100cc366004610815565b6101f2565b6100ab6100df36600461086a565b610389565b6100ec610443565b005b6000546040516001600160a01b0390911681526020016100b5565b6100ec61011736600461088e565b610457565b6100ec61012a36600461086a565b61048d565b6100ab61013d3660046107b0565b6104b7565b6100ec61015036600461086a565b61052f565b6000836001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610195573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101b991906108c7565b670de0b6b3a76400006101d56101d08887876101f2565b6105ad565b6101df91906108f6565b6101e99190610915565b95945050505050565b6000805b8281101561038157600084848381811061021257610212610937565b9050602002016020810190610227919061086a565b6040516370a0823160e01b81526001600160a01b0388811660048301529192508291600091908316906370a0823190602401602060405180830381865afa158015610276573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029a91906108c7565b905060006102d0600160006102ae87610616565b6001600160a01b03908116825260208201929092526040016000205416610389565b9050670de0b6b3a76400008161034a84866001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561031e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610342919061094d565b60ff16610680565b61035491906108f6565b61035e9190610915565b6103689087610970565b955050505050808061037990610988565b9150506101f6565b509392505050565b6000808290506000816001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156103cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f391906109c0565b50505091505061043b81836001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561031e573d6000803e3d6000fd5b949350505050565b61044b6106a5565b61045560006106ff565b565b61045f6106a5565b6001600160a01b03918216600090815260016020526040902080546001600160a01b03191691909216179055565b6104956106a5565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6000836001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051b91906108c7565b670de0b6b3a76400006101d58786866101f2565b6105376106a5565b6001600160a01b0381166105a15760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b6105aa816106ff565b50565b6002546001600160a01b039081166000908152600160205260408120549091670de0b6b3a7640000916105e09116610389565b6105f2670de0b6b3a7640000806108f6565b6105fc9190610915565b61060690846108f6565b6106109190610915565b92915050565b6000808290506000816001600160a01b031663b16a19de6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561065c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043b9190610a10565b60008061068e836012610a2d565b905061069b81600a610b28565b61043b90856108f6565b6000546001600160a01b031633146104555760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610598565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811681146105aa57600080fd5b60008083601f84011261077657600080fd5b50813567ffffffffffffffff81111561078e57600080fd5b6020830191508360208260051b85010111156107a957600080fd5b9250929050565b600080600080606085870312156107c657600080fd5b84356107d18161074f565b935060208501356107e18161074f565b9250604085013567ffffffffffffffff8111156107fd57600080fd5b61080987828801610764565b95989497509550505050565b60008060006040848603121561082a57600080fd5b83356108358161074f565b9250602084013567ffffffffffffffff81111561085157600080fd5b61085d86828701610764565b9497909650939450505050565b60006020828403121561087c57600080fd5b81356108878161074f565b9392505050565b600080604083850312156108a157600080fd5b82356108ac8161074f565b915060208301356108bc8161074f565b809150509250929050565b6000602082840312156108d957600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615610910576109106108e0565b500290565b60008261093257634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561095f57600080fd5b815160ff8116811461088757600080fd5b60008219821115610983576109836108e0565b500190565b60006001820161099a5761099a6108e0565b5060010190565b805169ffffffffffffffffffff811681146109bb57600080fd5b919050565b600080600080600060a086880312156109d857600080fd5b6109e1866109a1565b9450602086015193506040860151925060608601519150610a04608087016109a1565b90509295509295909350565b600060208284031215610a2257600080fd5b81516108878161074f565b600082821015610a3f57610a3f6108e0565b500390565b600181815b80851115610a7f578160001904821115610a6557610a656108e0565b80851615610a7257918102915b93841c9390800290610a49565b509250929050565b600082610a9657506001610610565b81610aa357506000610610565b8160018114610ab95760028114610ac357610adf565b6001915050610610565b60ff841115610ad457610ad46108e0565b50506001821b610610565b5060208310610133831016604e8410600b8410161715610b02575081810a610610565b610b0c8383610a44565b8060001904821115610b2057610b206108e0565b029392505050565b60006108878383610a8756fea2646970667358221220165cf0a14549064c4f5fad483d60b36ff092b703d11065c90a73014863cd820c64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 53,
        "contract": "contracts/PriceOracle.sol:PriceOracle",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 907,
        "contract": "contracts/PriceOracle.sol:PriceOracle",
        "label": "s_USDAggregatorAddresses",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 909,
        "contract": "contracts/PriceOracle.sol:PriceOracle",
        "label": "s_USDCaddress",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      }
    }
  }
}